{"version":3,"sources":["components/views/SyllabusCreator.js","components/AppData.js"],"names":["SyllabusCreator","props","getCourseTypes","courseTypesXML","state","syllabusXmlObj","getElementsByTagName","tmpCourseTypes","i","length","push","getAttribute","setState","courseTypes","getCourses","semesterXML","coursesXML","tmpCourses","tmpCourse","courseCode","courseTitle","courseCredit","getSemesters","yearXML","semestersXML","tmpSemesters","semesterId","courses","getYears","yearsXML","tmpYears","years","getBasicInfo","getNumberSuffix","num","getSemesterRowSpan","yearId","Math","max","getYearRowSpan","rowSpan","onchangeHandlerForAddNewCourseForm","event","syllabusName","effectiveFrom","effectiveTo","syllabusType","newCourse","year","semester","bind","url","Appdata","restApiBaseUrl","this","parser","DOMParser","fetch","then","res","text","xmlResult","parseFromString","console","log","className","map","Fragment","key","floor","random","style","color","course","courseIdx","semesterIdx","id","fontSize","type","placeholder","value","required","onChange","idx","Component"],"mappings":"mOAIMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAwBRC,eAAiB,WAKf,IAJA,IAAIC,EAAiB,EAAKC,MAAMC,eAAeC,qBAC7C,cAEEC,EAAiB,GACZC,EAAI,EAAGA,EAAIL,EAAeM,OAAQD,IACzCD,EAAeG,KAAKP,EAAeK,GAAGG,aAAa,SAErD,EAAKC,SAAS,CACZC,YAAaN,KAlCE,EAsCnBO,WAAa,SAAAC,GAGX,IAFA,IAAIC,EAAaD,EAAYT,qBAAqB,UAC9CW,EAAa,GACRT,EAAI,EAAGA,EAAIQ,EAAWP,OAAQD,IAAK,CAC1C,IAAIU,EAAY,CACdC,WAAY,GACZC,YAAa,GACbC,aAAc,IAEhBH,EAAUC,WAAaH,EAAWR,GAAGG,aAAa,cAClDM,EAAWP,KAAKQ,GAElB,OAAOD,GAlDU,EAqDnBK,aAAe,SAAAC,GAGb,IAFA,IAAIC,EAAeD,EAAQjB,qBAAqB,YAC5CmB,EAAe,GACVjB,EAAI,EAAGA,EAAIgB,EAAaf,OAAQD,IACvCiB,EAAaf,KAAK,CAChBgB,WAAYlB,EAAI,EAChBmB,QAAS,EAAKb,WAAWU,EAAahB,MAG1C,OAAOiB,GA9DU,EAiEnBG,SAAW,WAGT,IAFA,IAAIC,EAAW,EAAKzB,MAAMC,eAAeC,qBAAqB,QAC1DwB,EAAW,GACNtB,EAAI,EAAGA,EAAIqB,EAASpB,OAAQD,IAAK,CACxC,IAAIiB,EAAe,EAAKH,aAAaO,EAASrB,IAC9CsB,EAASpB,KAAKe,GAEhB,EAAKb,SAAS,CACZmB,MAAOD,KAzEQ,EA6EnBE,aAAe,aA7EI,EAsGnBC,gBAAkB,SAAAC,GAChB,OAAIA,EAAM,KAAO,EAAU,KACvBA,EAAM,KAAO,EAAU,KACvBA,EAAM,KAAO,EAAU,KACpB,MA1GU,EA6GnBC,mBAAqB,SAACC,EAAQV,GAC5B,OAAOW,KAAKC,IAAI,EAAG,EAAKlC,MAAM2B,MAAMK,GAAQV,GAAYC,QAAQlB,SA9G/C,EAiHnB8B,eAAiB,SAAAH,GACf,GAAwC,IAApC,EAAKhC,MAAM2B,MAAMK,GAAQ3B,OAAc,OAAO,EAElD,IADA,IAAI+B,EAAU,EACLhC,EAAI,EAAGA,EAAI,EAAKJ,MAAM2B,MAAMK,GAAQ3B,OAAQD,IACnDgC,GAAW,EAAKL,mBAAmBC,EAAQ5B,GAE7C,OAAOgC,GAvHU,EA2HnBC,mCAAqC,SAAAC,KAxHnC,EAAKtC,MAAQ,CACXuC,aAAc,OACdtC,eAAgB,GAChBuC,cAAe,EACfC,YAAa,EACbC,aAAc,GACdjC,YAAa,GACbkB,MAAO,GACPgB,UAAW,CACT5B,WAAY,GACZC,YAAa,GACbC,aAAc,GACd2B,KAAM,GACNC,SAAU,KAId,EAAKR,mCAAqC,EAAKA,mCAAmCS,KAAxC,gBApBzB,E,iFAmFE,IAAD,OACdC,EAAG,UAAMC,IAAQC,eAAd,yBAA6CC,KAAKlD,MAAMuC,cAEzDY,EAAS,IAAIC,UACnBC,MAAMN,GACHO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKjD,SAAS,CACZP,eAAgBkD,EAAOO,gBAAgBD,EAAW,cAGpD,EAAK7B,eACL,EAAK9B,iBACL,EAAK0B,WACLmC,QAAQC,IAAI,EAAK5D,MAAM2B,Y,+BA4BnB,IAAD,OACP,OACE,yBAAKkC,UAAU,aACb,4BAAK,iBACL,6BACE,2BAAOA,UAAU,kCACf,gCACA,+BACGX,KAAKlD,MAAM2B,MAAMmC,KAAI,SAAClB,EAAMZ,GAC3B,OACE,kBAAC,IAAM+B,SAAP,CAAgBC,IAAK/B,KAAKgC,MAAsB,IAAhBhC,KAAKiC,WACnC,wBAAIF,IAAK/B,KAAKgC,MAAsB,IAAhBhC,KAAKiC,WACvB,wBAAI9B,QAAS,EAAKD,eAAeH,IAC9BA,EACC,EACA,EAAKH,gBAAgBG,EAAS,GAC9B,SAGHY,EAAKvC,OAAS,EACb,wBAAI+B,QAAS,EAAKL,mBAAmBC,EAAQ,IAC1C,EAAI,EAAKH,gBAAgB,GAAK,aAE/B,KAEHe,EAAKvC,OAAS,GAAKuC,EAAK,GAAGrB,QAAQlB,OAAS,EAC3C,kBAAC,IAAM0D,SAAP,CAAgBC,IAAK/B,KAAKgC,MAAsB,IAAhBhC,KAAKiC,WACnC,4BAAKtB,EAAK,GAAGrB,QAAQ,GAAGR,YACxB,4BACE,8BACE,uBAAG8C,UAAU,mBAGjB,4BACE,8BACE,uBACEA,UAAU,cACVM,MAAO,CAAEC,MAAO,YAKtB,MAGLxB,EAAKvC,OAAS,GAAKuC,EAAK,GAAGrB,QAAQlB,OAAS,EACzCuC,EAAK,GAAGrB,QAAQuC,KAAI,SAACO,EAAQC,GAAT,OAClBA,EAAY,EACV,wBAAIN,IAAK/B,KAAKgC,MAAsB,IAAhBhC,KAAKiC,WACvB,4BAAKG,EAAOtD,YACZ,4BACE,8BACE,uBAAG8C,UAAU,mBAGjB,4BACE,8BACE,uBACEA,UAAU,cACVM,MAAO,CAAEC,MAAO,YAKtB,QAEN,KAEHxB,EAAKvC,OAAS,EACXuC,EAAKkB,KAAI,SAACjB,EAAU0B,GAAX,OACPA,EAAc,EACZ,kBAAC,IAAMR,SAAP,CACEC,IAAK/B,KAAKgC,MAAsB,IAAhBhC,KAAKiC,WAErB,wBAAIF,IAAK/B,KAAKgC,MAAsB,IAAhBhC,KAAKiC,WACvB,wBACE9B,QAASH,KAAKC,IAAI,EAAGW,EAAStB,QAAQlB,SAErCkE,EACC,EACA,EAAK1C,gBAAgB0C,EAAc,GACnC,aAEH1B,EAAStB,QAAQlB,OAAS,EACzB,kBAAC,IAAM0D,SAAP,CACEC,IAAK/B,KAAKgC,MAAsB,IAAhBhC,KAAKiC,WAErB,4BAAKrB,EAAStB,QAAQ,GAAGR,YACzB,4BACE,8BACE,uBAAG8C,UAAU,mBAGjB,4BACE,8BACE,uBACEA,UAAU,cACVM,MAAO,CAAEC,MAAO,YAKtB,MAELvB,EAAStB,QAAQlB,OAAS,EACvBwC,EAAStB,QAAQuC,KAAI,SAACO,EAAQC,GAAT,OACnBA,EAAY,EACV,wBACEN,IAAK/B,KAAKgC,MAAsB,IAAhBhC,KAAKiC,WAErB,4BAAKG,EAAOtD,YACZ,4BACE,8BACE,uBAAG8C,UAAU,mBAGjB,4BACE,8BACE,uBACEA,UAAU,cACVM,MAAO,CAAEC,MAAO,YAKtB,QAEN,MAEJ,QAEN,YAOhB,yBAAKP,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,aACb,+CAEF,0BAAMW,GAAG,uBACP,yBAAKX,UAAU,cACb,2BACEA,UAAU,eACVM,MAAO,CAAEM,SAAU,QACnBC,KAAK,OACLC,YAAY,cACZC,MAAO1B,KAAKlD,MAAM2C,UAAU5B,WAC5B8D,UAAQ,KAGZ,yBAAKhB,UAAU,cACb,2BACEA,UAAU,eACVM,MAAO,CAAEM,SAAU,QACnBC,KAAK,OACLC,YAAY,eACZC,MAAO1B,KAAKlD,MAAM2C,UAAU3B,YAC5B6D,UAAQ,EACRC,SAAU5B,KAAKb,sCAGnB,yBAAKwB,UAAU,cACb,2BACEA,UAAU,eACVM,MAAO,CAAEM,SAAU,QACnBC,KAAK,GACLC,YAAY,SACZC,MAAO1B,KAAKlD,MAAM2C,UAAU1B,aAC5B4D,UAAQ,EACRC,SAAU5B,KAAKb,sCAGnB,yBAAKwB,UAAU,cACb,6CACA,6BACA,4BACEe,MAAO1B,KAAKlD,MAAM2C,UAAUC,KAC5BkC,SAAU5B,KAAKb,oCAEda,KAAKlD,MAAM2B,MAAMmC,KAAI,SAAClB,EAAMmC,GAAP,OACpB,4BAAQf,IAAKe,EAAKH,MAAOG,EAAM,GAC5BA,EAAM,EAAI,EAAKlD,gBAAgBkD,EAAM,GAAK,cAKnD,yBAAKlB,UAAU,cACb,iDACA,6BACA,4BACEe,MAAO1B,KAAKlD,MAAM2C,UAAUE,SAC5BiC,SAAU5B,KAAKb,oCAEda,KAAKlD,MAAM2B,MAAMmC,KAAI,SAAClB,EAAMmC,GAAP,OACpB,4BAAQf,IAAKe,EAAKH,MAAOG,EAAM,GAC5BA,EAAM,EAAI,EAAKlD,gBAAgBkD,EAAM,GAAK,kBAKnD,yBAAKlB,UAAU,cACb,2BAAOa,KAAK,SAASE,MAAM,6B,GA5UfI,aAuVfpF,a,gCC3VA,KACbqD,eAAgB","file":"static/js/6.159a44fd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport Appdata from \"../AppData\";\n\nclass SyllabusCreator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      syllabusName: \"syl1\",\n      syllabusXmlObj: \"\",\n      effectiveFrom: 0,\n      effectiveTo: 0,\n      syllabusType: \"\",\n      courseTypes: [],\n      years: [],\n      newCourse: {\n        courseCode: \"\",\n        courseTitle: \"\",\n        courseCredit: \"\",\n        year: \"\",\n        semester: \"\"\n      }\n    };\n\n    this.onchangeHandlerForAddNewCourseForm = this.onchangeHandlerForAddNewCourseForm.bind(\n      this\n    );\n  }\n\n  getCourseTypes = () => {\n    let courseTypesXML = this.state.syllabusXmlObj.getElementsByTagName(\n      \"courseType\"\n    );\n    let tmpCourseTypes = [];\n    for (let i = 0; i < courseTypesXML.length; i++) {\n      tmpCourseTypes.push(courseTypesXML[i].getAttribute(\"name\"));\n    }\n    this.setState({\n      courseTypes: tmpCourseTypes\n    });\n  };\n\n  getCourses = semesterXML => {\n    let coursesXML = semesterXML.getElementsByTagName(\"course\");\n    let tmpCourses = [];\n    for (let i = 0; i < coursesXML.length; i++) {\n      let tmpCourse = {\n        courseCode: \"\",\n        courseTitle: \"\",\n        courseCredit: \"\"\n      };\n      tmpCourse.courseCode = coursesXML[i].getAttribute(\"courseCode\");\n      tmpCourses.push(tmpCourse);\n    }\n    return tmpCourses;\n  };\n\n  getSemesters = yearXML => {\n    let semestersXML = yearXML.getElementsByTagName(\"semester\");\n    let tmpSemesters = [];\n    for (let i = 0; i < semestersXML.length; i++) {\n      tmpSemesters.push({\n        semesterId: i + 1,\n        courses: this.getCourses(semestersXML[i])\n      });\n    }\n    return tmpSemesters;\n  };\n\n  getYears = () => {\n    let yearsXML = this.state.syllabusXmlObj.getElementsByTagName(\"year\");\n    let tmpYears = [];\n    for (let i = 0; i < yearsXML.length; i++) {\n      let tmpSemesters = this.getSemesters(yearsXML[i]);\n      tmpYears.push(tmpSemesters);\n    }\n    this.setState({\n      years: tmpYears\n    });\n  };\n\n  getBasicInfo = () => {\n    // this.setState({\n    //   effectiveFrom: this.state.syllabusXmlObj.getElementsByTagName(\"\")\n    // });\n  };\n\n  componentDidMount() {\n    let url = `${Appdata.restApiBaseUrl}/syllabus/get/${this.state.syllabusName}`;\n\n    const parser = new DOMParser();\n    fetch(url)\n      .then(res => res.text())\n      .then(xmlResult => {\n        this.setState({\n          syllabusXmlObj: parser.parseFromString(xmlResult, \"text/xml\")\n        });\n\n        this.getBasicInfo();\n        this.getCourseTypes();\n        this.getYears();\n        console.log(this.state.years);\n      });\n  }\n\n  /** Syllabus Table Functions */\n  getNumberSuffix = num => {\n    if (num % 10 === 1) return \"st\";\n    if (num % 10 === 2) return \"nd\";\n    if (num % 10 === 3) return \"rd\";\n    return \"th\";\n  };\n\n  getSemesterRowSpan = (yearId, semesterId) => {\n    return Math.max(1, this.state.years[yearId][semesterId].courses.length);\n  };\n\n  getYearRowSpan = yearId => {\n    if (this.state.years[yearId].length === 0) return 1;\n    let rowSpan = 0;\n    for (let i = 0; i < this.state.years[yearId].length; i++) {\n      rowSpan += this.getSemesterRowSpan(yearId, i);\n    }\n    return rowSpan;\n  };\n\n  /**Add new course form */\n  onchangeHandlerForAddNewCourseForm = event => {};\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h6>{\"Edit Syllabus\"}</h6>\n        <div>\n          <table className=\"table table-sm table-bordered \">\n            <thead></thead>\n            <tbody>\n              {this.state.years.map((year, yearId) => {\n                return (\n                  <React.Fragment key={Math.floor(Math.random() * 1000)}>\n                    <tr key={Math.floor(Math.random() * 1000)}>\n                      <td rowSpan={this.getYearRowSpan(yearId)}>\n                        {yearId +\n                          1 +\n                          this.getNumberSuffix(yearId + 1) +\n                          \" Year\"}\n                      </td>\n\n                      {year.length > 0 ? (\n                        <td rowSpan={this.getSemesterRowSpan(yearId, 0)}>\n                          {1 + this.getNumberSuffix(1) + \" Semester\"}\n                        </td>\n                      ) : null}\n\n                      {year.length > 0 && year[0].courses.length > 0 ? (\n                        <React.Fragment key={Math.floor(Math.random() * 1000)}>\n                          <td>{year[0].courses[0].courseCode}</td>\n                          <td>\n                            <span>\n                              <i className=\"fa fa-pencil\"></i>\n                            </span>\n                          </td>\n                          <td>\n                            <span>\n                              <i\n                                className=\"fa fa-trash\"\n                                style={{ color: \"red\" }}\n                              ></i>\n                            </span>\n                          </td>\n                        </React.Fragment>\n                      ) : null}\n                    </tr>\n\n                    {year.length > 0 && year[0].courses.length > 1\n                      ? year[0].courses.map((course, courseIdx) =>\n                          courseIdx > 0 ? (\n                            <tr key={Math.floor(Math.random() * 1000)}>\n                              <td>{course.courseCode}</td>\n                              <td>\n                                <span>\n                                  <i className=\"fa fa-pencil\"></i>\n                                </span>\n                              </td>\n                              <td>\n                                <span>\n                                  <i\n                                    className=\"fa fa-trash\"\n                                    style={{ color: \"red\" }}\n                                  ></i>\n                                </span>\n                              </td>\n                            </tr>\n                          ) : null\n                        )\n                      : null}\n\n                    {year.length > 1\n                      ? year.map((semester, semesterIdx) =>\n                          semesterIdx > 0 ? (\n                            <React.Fragment\n                              key={Math.floor(Math.random() * 1000)}\n                            >\n                              <tr key={Math.floor(Math.random() * 1000)}>\n                                <td\n                                  rowSpan={Math.max(1, semester.courses.length)}\n                                >\n                                  {semesterIdx +\n                                    1 +\n                                    this.getNumberSuffix(semesterIdx + 1) +\n                                    \" Semester\"}\n                                </td>\n                                {semester.courses.length > 0 ? (\n                                  <React.Fragment\n                                    key={Math.floor(Math.random() * 1000)}\n                                  >\n                                    <td>{semester.courses[0].courseCode}</td>\n                                    <td>\n                                      <span>\n                                        <i className=\"fa fa-pencil\"></i>\n                                      </span>\n                                    </td>\n                                    <td>\n                                      <span>\n                                        <i\n                                          className=\"fa fa-trash\"\n                                          style={{ color: \"red\" }}\n                                        ></i>\n                                      </span>\n                                    </td>\n                                  </React.Fragment>\n                                ) : null}\n                              </tr>\n                              {semester.courses.length > 1\n                                ? semester.courses.map((course, courseIdx) =>\n                                    courseIdx > 0 ? (\n                                      <tr\n                                        key={Math.floor(Math.random() * 1000)}\n                                      >\n                                        <td>{course.courseCode}</td>\n                                        <td>\n                                          <span>\n                                            <i className=\"fa fa-pencil\"></i>\n                                          </span>\n                                        </td>\n                                        <td>\n                                          <span>\n                                            <i\n                                              className=\"fa fa-trash\"\n                                              style={{ color: \"red\" }}\n                                            ></i>\n                                          </span>\n                                        </td>\n                                      </tr>\n                                    ) : null\n                                  )\n                                : null}\n                            </React.Fragment>\n                          ) : null\n                        )\n                      : null}\n                  </React.Fragment>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n              <div className=\"container\">\n                <h6>Add New Course</h6>\n              </div>\n              <form id=\"add new course form\">\n                <div className=\"form-group\">\n                  <input\n                    className=\"form-control\"\n                    style={{ fontSize: \"11px\" }}\n                    type=\"text\"\n                    placeholder=\"Course Code\"\n                    value={this.state.newCourse.courseCode}\n                    required\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    className=\"form-control\"\n                    style={{ fontSize: \"11px\" }}\n                    type=\"text\"\n                    placeholder=\"Course Title\"\n                    value={this.state.newCourse.courseTitle}\n                    required\n                    onChange={this.onchangeHandlerForAddNewCourseForm}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    className=\"form-control\"\n                    style={{ fontSize: \"11px\" }}\n                    type=\"\"\n                    placeholder=\"Credit\"\n                    value={this.state.newCourse.courseCredit}\n                    required\n                    onChange={this.onchangeHandlerForAddNewCourseForm}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Selet Year</label>\n                  <br />\n                  <select\n                    value={this.state.newCourse.year}\n                    onChange={this.onchangeHandlerForAddNewCourseForm}\n                  >\n                    {this.state.years.map((year, idx) => (\n                      <option key={idx} value={idx + 1}>\n                        {idx + 1 + this.getNumberSuffix(idx + 1) + \" Year\"}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"form-group\">\n                  <label>Selet Semester</label>\n                  <br />\n                  <select\n                    value={this.state.newCourse.semester}\n                    onChange={this.onchangeHandlerForAddNewCourseForm}\n                  >\n                    {this.state.years.map((year, idx) => (\n                      <option key={idx} value={idx + 1}>\n                        {idx + 1 + this.getNumberSuffix(idx + 1) + \" Semester\"}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"form-group\">\n                  <input type=\"submit\" value=\"Add New Course\" />\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SyllabusCreator;\n","export default {\n  restApiBaseUrl: \"https://cseju.herokuapp.com/api\"\n};\n"],"sourceRoot":""}