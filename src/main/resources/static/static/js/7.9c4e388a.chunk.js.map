{"version":3,"sources":["../node_modules/react-bootstrap/esm/ButtonGroup.js","components/syllabus/syllabusTableComponents/YearMenus.js","components/syllabus/syllabusTableComponents/SemesterMenus.js","components/syllabus/SyllabusCreator.js","components/AppData.js"],"names":["ButtonGroup","React","forwardRef","props","ref","bsPrefix","size","toggle","vertical","className","_props$as","as","Component","rest","_objectWithoutPropertiesLoose","prefix","useBootstrapPrefix","baseClass","createElement","_extends","classNames","displayName","defaultProps","role","actionButtonStyle","padding","height","width","YearMenus","Fragment","style","float","Button","id","this","yearData","yearId","variant","onClick","addSemester","icon","faPlusSquare","deleteYear","faTrashAlt","SemesterMenus","semesterData","semesterId","deleteSemester","SyllabusCreator","getCourseTypes","courseTypesXML","state","syllabusXmlObj","getElementsByTagName","tmpCourseTypes","i","length","push","getAttribute","setState","courseTypes","getCourses","semesterXML","coursesXML","tmpCourses","tmpCourse","courseCode","courseTitle","courseCredit","getSemesters","yearXML","semestersXML","tmpSemesters","courses","getYears","yearsXML","tmpYears","semesters","years","getBasicInfo","parseXMLData","getNumberSuffix","num","getSemesterRowSpan","Math","max","getYearRowSpan","rowSpan","addYear","event","url","Appdata","restApiBaseUrl","syllabusName","parser","DOMParser","Axios","get","then","response","data","parseFromString","currentTarget","split","delete","tmpId","onchangeHandlerForAddNewCourseForm","effectiveFrom","effectiveTo","syllabusType","newCourse","year","semester","bind","Table","bordered","map","key","floor","random","faPen","course","courseIdx","semesterIdx","border","faPlusCircle"],"mappings":"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","file":"static/js/7.9c4e388a.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  vertical: false,\n  toggle: false,\n  role: 'group'\n};\nvar ButtonGroup = React.forwardRef(function (props, ref) {\n  var bsPrefix = props.bsPrefix,\n      size = props.size,\n      toggle = props.toggle,\n      vertical = props.vertical,\n      className = props.className,\n      _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      rest = _objectWithoutPropertiesLoose(props, [\"bsPrefix\", \"size\", \"toggle\", \"vertical\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  var baseClass = prefix;\n  if (vertical) baseClass = prefix + \"-vertical\";\n  return React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classNames(className, baseClass, size && prefix + \"-\" + size, toggle && prefix + \"-toggle\")\n  }));\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import React, { Component } from \"react\";\nimport { ButtonGroup, Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusSquare, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst actionButtonStyle = {\n  padding: \"0px\",\n  height: \"22px\",\n  width: \"22px\"\n};\n\nclass YearMenus extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <ButtonGroup style={{ float: \"right\" }}>\n          <Button\n            id={\"year_\" + this.props.yearData.yearId}\n            size=\"sm\"\n            variant=\"outline-secondary\"\n            style={actionButtonStyle}\n            onClick={this.props.addSemester}\n          >\n            <span>\n              <FontAwesomeIcon\n                id={\"year_\" + this.props.yearData.yearId}\n                icon={faPlusSquare}\n              />\n            </span>\n          </Button>\n          <Button\n            id={\"year_\" + this.props.yearData.yearId}\n            size=\"sm\"\n            variant=\"outline-danger\"\n            style={actionButtonStyle}\n            onClick={this.props.deleteYear}\n          >\n            <span>\n              <FontAwesomeIcon\n                icon={faTrashAlt}\n                id={\"year_\" + this.props.yearData.yearId}\n              />\n            </span>\n          </Button>\n        </ButtonGroup>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default YearMenus;\n","import React, { Component } from \"react\";\nimport { ButtonGroup, Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusSquare, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst actionButtonStyle = {\n  padding: \"0px\",\n  height: \"22px\",\n  width: \"22px\"\n};\n\nclass SemesterMenus extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <ButtonGroup style={{ float: \"right\" }}>\n          <Button\n            size=\"sm\"\n            variant=\"outline-secondary\"\n            style={actionButtonStyle}\n          >\n            <span>\n              <FontAwesomeIcon icon={faPlusSquare} />\n            </span>\n          </Button>\n          <Button\n            id={\n              \"year_\" +\n              this.props.semesterData.yearId +\n              \"_semester_\" +\n              this.props.semesterData.semesterId\n            }\n            size=\"sm\"\n            variant=\"outline-danger\"\n            style={actionButtonStyle}\n            onClick={this.props.deleteSemester}\n          >\n            <span>\n              <FontAwesomeIcon\n                icon={faTrashAlt}\n                id={\n                  \"year_\" +\n                  this.props.semesterData.yearId +\n                  \"_semester_\" +\n                  this.props.semesterData.semesterId\n                }\n              />\n            </span>\n          </Button>\n        </ButtonGroup>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SemesterMenus;\n","import React, { Component } from \"react\";\n\nimport Appdata from \"../AppData\";\nimport Axios from \"axios\";\nimport { Table, Button } from \"react-bootstrap\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPen,\n  faTrashAlt,\n  faPlusCircle\n} from \"@fortawesome/free-solid-svg-icons\";\nimport YearMenus from \"./syllabusTableComponents/YearMenus\";\nimport SemesterMenus from \"./syllabusTableComponents/SemesterMenus\";\n\nconst actionButtonStyle = {\n  padding: \"0px\",\n  height: \"22px\",\n  width: \"22px\"\n};\n\nclass SyllabusCreator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      syllabusName: \"syl1\",\n      syllabusXmlObj: \"\",\n      effectiveFrom: 0,\n      effectiveTo: 0,\n      syllabusType: \"\",\n      courseTypes: [],\n      years: [],\n      newCourse: {\n        courseCode: \"\",\n        courseTitle: \"\",\n        courseCredit: \"\",\n        year: \"\",\n        semester: \"\"\n      }\n    };\n\n    this.onchangeHandlerForAddNewCourseForm = this.onchangeHandlerForAddNewCourseForm.bind(\n      this\n    );\n    this.addYear = this.addYear.bind(this);\n    this.deleteYear = this.deleteYear.bind(this);\n    this.addSemester = this.addSemester.bind(this);\n    this.deleteSemester = this.deleteSemester.bind(this);\n  }\n\n  getCourseTypes = () => {\n    let courseTypesXML = this.state.syllabusXmlObj.getElementsByTagName(\n      \"courseType\"\n    );\n    let tmpCourseTypes = [];\n    for (let i = 0; i < courseTypesXML.length; i++) {\n      tmpCourseTypes.push(courseTypesXML[i].getAttribute(\"name\"));\n    }\n    this.setState({\n      courseTypes: tmpCourseTypes\n    });\n  };\n\n  getCourses = semesterXML => {\n    let coursesXML = semesterXML.getElementsByTagName(\"course\");\n    let tmpCourses = [];\n    for (let i = 0; i < coursesXML.length; i++) {\n      let tmpCourse = {\n        courseCode: \"\",\n        courseTitle: \"\",\n        courseCredit: \"\"\n      };\n      tmpCourse.courseCode = coursesXML[i].getAttribute(\"courseCode\");\n      tmpCourses.push(tmpCourse);\n    }\n    return tmpCourses;\n  };\n\n  getSemesters = yearXML => {\n    let semestersXML = yearXML.getElementsByTagName(\"semester\");\n    let tmpSemesters = [];\n    for (let i = 0; i < semestersXML.length; i++) {\n      tmpSemesters.push({\n        semesterId: semestersXML[i].getAttribute(\"id\"),\n        courses: this.getCourses(semestersXML[i])\n      });\n    }\n    return tmpSemesters;\n  };\n\n  getYears = () => {\n    let yearsXML = this.state.syllabusXmlObj.getElementsByTagName(\"year\");\n    let tmpYears = [];\n    for (let i = 0; i < yearsXML.length; i++) {\n      let tmpSemesters = this.getSemesters(yearsXML[i]);\n      tmpYears.push({\n        yearId: yearsXML[i].getAttribute(\"id\"),\n        semesters: tmpSemesters\n      });\n    }\n    this.setState({\n      years: tmpYears\n    });\n  };\n\n  getBasicInfo = () => {\n    // this.setState({\n    //   effectiveFrom: this.state.syllabusXmlObj.getElementsByTagName(\"\")\n    // });\n  };\n\n  parseXMLData = () => {\n    this.getBasicInfo();\n    this.getCourseTypes();\n    this.getYears();\n  };\n\n  componentDidMount() {\n    let url = `${Appdata.restApiBaseUrl}/syllabus/get/${this.state.syllabusName}`;\n\n    const parser = new DOMParser();\n\n    Axios.get(url)\n      .then(response => response.data)\n      .then(data => {\n        this.setState({\n          syllabusXmlObj: parser.parseFromString(data, \"text/xml\")\n        });\n        this.parseXMLData();\n      });\n  }\n\n  /** Syllabus Table Functions */\n  getNumberSuffix = num => {\n    if (num % 10 === 1) return \"st\";\n    if (num % 10 === 2) return \"nd\";\n    if (num % 10 === 3) return \"rd\";\n    return \"th\";\n  };\n\n  getSemesterRowSpan = (yearId, semesterId) => {\n    return Math.max(\n      1,\n      this.state.years[yearId].semesters[semesterId].courses.length\n    );\n  };\n\n  getYearRowSpan = yearId => {\n    if (this.state.years[yearId].semesters.length === 0) return 1;\n    let rowSpan = 0;\n    for (let i = 0; i < this.state.years[yearId].semesters.length; i++) {\n      rowSpan += this.getSemesterRowSpan(yearId, i);\n    }\n    return rowSpan;\n  };\n\n  addYear = event => {\n    let url = `${Appdata.restApiBaseUrl}/syllabus/edit/${this.state.syllabusName}/add/year`;\n\n    const parser = new DOMParser();\n\n    Axios.get(url)\n      .then(response => response.data)\n      .then(data => {\n        this.setState({\n          syllabusXmlObj: parser.parseFromString(data, \"text/xml\")\n        });\n        this.parseXMLData();\n      });\n  };\n\n  deleteYear = event => {\n    let yearId = event.currentTarget.id.split(\"_\")[1];\n    let url = `${Appdata.restApiBaseUrl}/syllabus/edit/${this.state.syllabusName}/delete/year/${yearId}`;\n\n    const parser = new DOMParser();\n\n    Axios.delete(url, {})\n      .then(response => response.data)\n      .then(data => {\n        this.setState({\n          syllabusXmlObj: parser.parseFromString(data, \"text/xml\")\n        });\n        this.parseXMLData();\n      });\n  };\n\n  addSemester = event => {\n    let yearId = event.currentTarget.id.split(\"_\")[1];\n    let url = `${Appdata.restApiBaseUrl}/syllabus/edit/${this.state.syllabusName}/${yearId}/add/semester`;\n\n    const parser = new DOMParser();\n\n    Axios.get(url)\n      .then(response => response.data)\n      .then(data => {\n        this.setState({\n          syllabusXmlObj: parser.parseFromString(data, \"text/xml\")\n        });\n        this.parseXMLData();\n      });\n  };\n\n  deleteSemester = event => {\n    let tmpId = event.currentTarget.id.split(\"_\");\n    let yearId = tmpId[1];\n    let semesterId = tmpId[3];\n\n    let url = `${Appdata.restApiBaseUrl}/syllabus/edit/${this.state.syllabusName}/${yearId}/delete/semester/${semesterId}`;\n\n    const parser = new DOMParser();\n\n    Axios.delete(url, {})\n      .then(response => response.data)\n      .then(data => {\n        this.setState({\n          syllabusXmlObj: parser.parseFromString(data, \"text/xml\")\n        });\n        this.parseXMLData();\n      });\n  };\n\n  /**Add new course form */\n  onchangeHandlerForAddNewCourseForm = event => {};\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h6>{\"Edit Syllabus\"}</h6>\n        <div>\n          <Table size=\"sm\" bordered>\n            <thead></thead>\n            <tbody>\n              {this.state.years.map((year, yearId) => {\n                return (\n                  <React.Fragment key={Math.floor(Math.random() * 1000)}>\n                    <tr key={Math.floor(Math.random() * 1000)}>\n                      <td rowSpan={this.getYearRowSpan(yearId)}>\n                        {year.yearId +\n                          this.getNumberSuffix(year.yearId) +\n                          \" Year \"}\n                        <YearMenus\n                          yearData={{ yearId: year.yearId }}\n                          addSemester={this.addSemester}\n                          deleteYear={this.deleteYear}\n                        />\n                      </td>\n\n                      {year.semesters.length > 0 ? (\n                        <td rowSpan={this.getSemesterRowSpan(yearId, 0)}>\n                          {year.semesters[0].semesterId +\n                            this.getNumberSuffix(year.semesters[0].semesterId) +\n                            \" Semester \"}\n                          <SemesterMenus\n                            semesterData={{\n                              yearId: year.yearId,\n                              semesterId: year.semesters[0].semesterId\n                            }}\n                            deleteSemester={this.deleteSemester}\n                          />\n                        </td>\n                      ) : null}\n\n                      {year.semesters.length > 0 &&\n                      year.semesters[0].courses.length > 0 ? (\n                        <React.Fragment key={Math.floor(Math.random() * 1000)}>\n                          <td>{year.semesters[0].courses[0].courseCode}</td>\n                          <td>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline-secondary\"\n                              style={actionButtonStyle}\n                            >\n                              <span>\n                                <FontAwesomeIcon icon={faPen} />\n                              </span>\n                            </Button>\n                          </td>\n                          <td>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline-danger\"\n                              style={actionButtonStyle}\n                            >\n                              <span>\n                                <FontAwesomeIcon icon={faTrashAlt} />\n                              </span>\n                            </Button>\n                          </td>\n                        </React.Fragment>\n                      ) : null}\n                    </tr>\n\n                    {year.semesters.length > 0 &&\n                    year.semesters[0].courses.length > 1\n                      ? year.semesters[0].courses.map((course, courseIdx) =>\n                          courseIdx > 0 ? (\n                            <tr key={Math.floor(Math.random() * 1000)}>\n                              <td>{course.courseCode}</td>\n                              <td>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline-secondary\"\n                                  style={actionButtonStyle}\n                                >\n                                  <span>\n                                    <FontAwesomeIcon icon={faPen} />\n                                  </span>\n                                </Button>\n                              </td>\n                              <td>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline-danger\"\n                                  style={actionButtonStyle}\n                                >\n                                  <span>\n                                    <FontAwesomeIcon icon={faTrashAlt} />\n                                  </span>\n                                </Button>\n                              </td>\n                            </tr>\n                          ) : null\n                        )\n                      : null}\n\n                    {year.semesters.length > 1\n                      ? year.semesters.map((semester, semesterIdx) =>\n                          semesterIdx > 0 ? (\n                            <React.Fragment\n                              key={Math.floor(Math.random() * 1000)}\n                            >\n                              <tr key={Math.floor(Math.random() * 1000)}>\n                                <td\n                                  rowSpan={Math.max(1, semester.courses.length)}\n                                >\n                                  {semester.semesterId +\n                                    this.getNumberSuffix(semester.semesterId) +\n                                    \" Semester \"}\n                                  <SemesterMenus\n                                    semesterData={{\n                                      yearId: year.yearId,\n                                      semesterId: semester.semesterId\n                                    }}\n                                    deleteSemester={this.deleteSemester}\n                                  />\n                                </td>\n                                {semester.courses.length > 0 ? (\n                                  <React.Fragment\n                                    key={Math.floor(Math.random() * 1000)}\n                                  >\n                                    <td>{semester.courses[0].courseCode}</td>\n                                    <td>\n                                      <Button\n                                        size=\"sm\"\n                                        variant=\"outline-secondary\"\n                                        style={actionButtonStyle}\n                                      >\n                                        <span>\n                                          <FontAwesomeIcon icon={faPen} />\n                                        </span>\n                                      </Button>\n                                    </td>\n                                    <td>\n                                      <Button\n                                        size=\"sm\"\n                                        variant=\"outline-danger\"\n                                        style={actionButtonStyle}\n                                      >\n                                        <span>\n                                          <FontAwesomeIcon icon={faTrashAlt} />\n                                        </span>\n                                      </Button>\n                                    </td>\n                                  </React.Fragment>\n                                ) : null}\n                              </tr>\n                              {semester.courses.length > 1\n                                ? semester.courses.map((course, courseIdx) =>\n                                    courseIdx > 0 ? (\n                                      <tr\n                                        key={Math.floor(Math.random() * 1000)}\n                                      >\n                                        <td>{course.courseCode}</td>\n                                        <td>\n                                          <Button\n                                            size=\"sm\"\n                                            variant=\"outline-secondary\"\n                                            style={actionButtonStyle}\n                                          >\n                                            <span>\n                                              <FontAwesomeIcon icon={faPen} />\n                                            </span>\n                                          </Button>\n                                        </td>\n                                        <td>\n                                          <Button\n                                            size=\"sm\"\n                                            variant=\"outline-danger\"\n                                            style={actionButtonStyle}\n                                          >\n                                            <span>\n                                              <FontAwesomeIcon\n                                                icon={faTrashAlt}\n                                              />\n                                            </span>\n                                          </Button>\n                                        </td>\n                                      </tr>\n                                    ) : null\n                                  )\n                                : null}\n                            </React.Fragment>\n                          ) : null\n                        )\n                      : null}\n                  </React.Fragment>\n                );\n              })}\n            </tbody>\n          </Table>\n          <table style={{ border: \"none\" }}>\n            <tbody>\n              <tr>\n                <td>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline-secondary\"\n                    style={{\n                      float: \"left\"\n                    }}\n                    onClick={this.addYear}\n                  >\n                    <span>\n                      <FontAwesomeIcon icon={faPlusCircle} />\n                    </span>\n                    {\" Add Year\"}\n                  </Button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <div className=\"container\"></div>\n      </div>\n    );\n  }\n}\n\nexport default SyllabusCreator;\n","export default {\n  restApiBaseUrl: \"https://cseju.herokuapp.com/api\"\n};\n"],"sourceRoot":""}